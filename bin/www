#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../dist/app').default;
var debug = require('debug')('server:server');
var http = require('http');

var socketio = require('socket.io');
var { addUser, removeUser, getUser, getUsersInRoom } = require('../dist/middlewares/users')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/*
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = socketio(server);


io.on('connection', (socket) => {

  console.log('new user');
  socket.on("join", ({ name, room }, callback) => {
const {error,user} =addUser({id:socket.id,name,room})
    if (error) return callback(error)

    socket.emit('message', {user: 'admin', text: `${user.name}, welcome to ${user.room}`})
socket.broadcast.to(user.room).emit('message', {user: 'admin', text: `${user.name}, has joined`})
    socket.join(user.room);
    callback();
  })


  socket.on('sendMessage', (message, callback) => {
    const user = getUser(socket.id)

    io.to(user.room).emit('message', {user: user.name, text:message})

    io.to(user.room).emit('roomData', {room: user.room, users: getUsersInRoom(user.room)})
    callback();
  })

  socket.on('disconnect', () => {
    console.log('new user disconnect');
    io.to(user.room).emit('message', { user: 'admin', text: `${user.name} has left` })
    io.to(user.room).emit("roomData", {
      room: user.room,
      users: getUsersInRoom(user.room),
    });
    
  });
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, console.log(`serve up on ${port}`));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
